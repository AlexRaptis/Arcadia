import random
import time

# Core Modules
class GameDataCollector:
    def __init__(self):
        self.game_data = {}

    def collect_data(self, player_id):
        """Simulates data collection from in-game events."""
        self.game_data[player_id] = {
            "accuracy": random.randint(60, 90),
            "reaction_time": random.uniform(0.2, 0.6),
            "decision_making": random.randint(50, 80),
            "teamwork": random.randint(40, 90)
        }
        return self.game_data[player_id]


class PerformanceAnalyzer:
    def analyze_performance(self, player_data):
        """Analyzes player data and identifies key improvement areas."""
        analysis = {}
        for metric, value in player_data.items():
            if value < 70:
                analysis[metric] = "Needs Improvement"
            else:
                analysis[metric] = "Strong"
        return analysis


class Coach:
    def provide_recommendations(self, analysis):
        """Generates personalized tips based on performance analysis."""
        recommendations = {}
        for metric, status in analysis.items():
            if status == "Needs Improvement":
                if metric == "accuracy":
                    recommendations[metric] = "Practice aiming drills for 20 minutes daily."
                elif metric == "reaction_time":
                    recommendations[metric] = "Engage in reflex training games to improve reaction speed."
                elif metric == "decision_making":
                    recommendations[metric] = "Review game replays and analyze key decisions."
                elif metric == "teamwork":
                    recommendations[metric] = "Communicate more actively with your team."
        return recommendations


class ProgressTracker:
    def __init__(self):
        self.progress = {}

    def track_progress(self, player_id, new_data):
        """Tracks improvement by comparing new data with historical performance."""
        if player_id not in self.progress:
            self.progress[player_id] = []
        self.progress[player_id].append(new_data)
        return self.progress[player_id]


class ScenarioGenerator:
    def generate_scenario(self, skill):
        """Creates practice scenarios to target specific skills."""
        scenarios = {
            "accuracy": "Hit 15 moving targets within 30 seconds.",
            "reaction_time": "Dodge incoming obstacles within 0.5 seconds.",
            "decision_making": "Choose the optimal route to flank an enemy team.",
            "teamwork": "Coordinate with teammates to capture an objective."
        }
        return scenarios.get(skill, "General practice mode enabled.")


# Example Workflow
if __name__ == "__main__":
    player_id = "Player123"

    # Data Collection
    collector = GameDataCollector()
    player_data = collector.collect_data(player_id)
    print(f"Collected Data for {player_id}: {player_data}\n")

    # Performance Analysis
    analyzer = PerformanceAnalyzer()
    analysis = analyzer.analyze_performance(player_data)
    print(f"Performance Analysis: {analysis}\n")

    # Coaching Recommendations
    coach = Coach()
    recommendations = coach.provide_recommendations(analysis)
    print(f"Coaching Recommendations: {recommendations}\n")

    # Track Progress
    tracker = ProgressTracker()
    progress = tracker.track_progress(player_id, player_data)
    print(f"Progress History: {progress}\n")

    # Generate Practice Scenario
    scenario_gen = ScenarioGenerator()
    practice_scenario = scenario_gen.generate_scenario("accuracy")
    print(f"Practice Scenario: {practice_scenario}\n")
