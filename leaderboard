class Leaderboard:
    def __init__(self):
        self.scores = {}

    def add_player(self, player_id, metrics):
        """Adds a new player and their metrics to the leaderboard."""
        self.scores[player_id] = metrics

    def update_score(self, player_id, metric, value):
        """Updates a specific metric for an existing player."""
        if player_id in self.scores:
            if metric in self.scores[player_id]:
                self.scores[player_id][metric] += value
            else:
                self.scores[player_id][metric] = value
        else:
            print(f"Player {player_id} not found on the leaderboard.")

    def get_top_players(self, metric, top_n=5):
        """Returns the top N players based on a specific metric."""
        sorted_players = sorted(
            self.scores.items(), key=lambda x: x[1].get(metric, 0), reverse=True
        )
        return sorted_players[:top_n]

    def get_player_stats(self, player_id):
        """Retrieves detailed stats for a specific player."""
        return self.scores.get(player_id, f"Player {player_id} not found.")


# Example Usage
if __name__ == "__main__":
    leaderboard = Leaderboard()

    # Add players
    leaderboard.add_player("Player123", {"accuracy": 85, "reaction_time": 0.4, "score": 1200})
    leaderboard.add_player("Player456", {"accuracy": 90, "reaction_time": 0.35, "score": 1300})
    leaderboard.add_player("Player789", {"accuracy": 75, "reaction_time": 0.5, "score": 1100})

    # Update scores
    leaderboard.update_score("Player123", "score", 100)
    leaderboard.update_score("Player456", "accuracy", 5)

    # Get top players by score
    top_players = leaderboard.get_top_players("score")
    print("Top Players by Score:")
    for rank, (player, stats) in enumerate(top_players, start=1):
        print(f"{rank}. {player} - Score: {stats['score']}")

    # Get stats for a specific player
    player_stats = leaderboard.get_player_stats("Player123")
    print(f"\nStats for Player123: {player_stats}")
